import { SbcAppKit } from '@stablecoin.xyz/core';
import { {{chain}} } from 'viem/chains';

let sbcAppKit;

async function initializeSbc() {
  try {
    sbcAppKit = new SbcAppKit({
      apiKey: '{{apiKey}}',
      chain: {{chain}},
      debug: true
    });

    const account = await sbcAppKit.getAccount();
    const ownerAddress = sbcAppKit.getOwnerAddress();
    const chainConfig = sbcAppKit.getChainConfig();
    
    document.getElementById('account-info').innerHTML = `
      <p><strong>Smart Account:</strong> ${account.address}</p>
      <p><strong>Owner Address:</strong> ${ownerAddress}</p>
      <p><strong>Chain:</strong> ${chainConfig.name}</p>
      <p><strong>Deployment:</strong> ${account.deploymentTransaction ? 'Deployed' : 'Ready to deploy'}</p>
    `;

    document.getElementById('send-tx').disabled = false;
    document.getElementById('estimate-tx').disabled = false;
  } catch (error) {
    document.getElementById('account-info').innerHTML = `
      <p class="error">Error: ${error.message}</p>
    `;
  }
}

async function estimateTransaction() {
  if (!sbcAppKit) return;

  const button = document.getElementById('estimate-tx');
  button.disabled = true;
  button.textContent = 'Estimating...';

  try {
    // Example transaction - replace with your own logic
    const estimate = await sbcAppKit.estimateUserOperation({
      to: '0x1234567890123456789012345678901234567890',
      data: '0x',
      value: '0'
    });

    document.getElementById('estimate-result').innerHTML = `
      <p><strong>Gas Estimate:</strong> ${estimate.totalGasUsed}</p>
      <p><strong>Gas Cost:</strong> ${estimate.totalGasCost} wei</p>
    `;
  } catch (error) {
    document.getElementById('estimate-result').innerHTML = `
      <p class="error">Estimate failed: ${error.message}</p>
    `;
  } finally {
    button.disabled = false;
    button.textContent = 'Estimate Gas';
  }
}

async function sendTestTransaction() {
  if (!sbcAppKit) return;

  const button = document.getElementById('send-tx');
  button.disabled = true;
  button.textContent = 'Processing...';

  try {
    // Example transaction - replace with your own logic
    const result = await sbcAppKit.sendUserOperation({
      to: '0x1234567890123456789012345678901234567890',
      data: '0x',
      value: '0'
    });

    document.getElementById('tx-result').innerHTML = `
      <p><strong>Success!</strong></p>
      <p><strong>Transaction Hash:</strong> <a href="${sbcAppKit.getChainConfig().blockExplorers?.default?.url}/tx/${result.transactionHash}" target="_blank">${result.transactionHash}</a></p>
      <p><strong>User Op Hash:</strong> ${result.userOperationHash}</p>
    `;
  } catch (error) {
    document.getElementById('tx-result').innerHTML = `
      <p class="error">Transaction failed: ${error.message}</p>
    `;
  } finally {
    button.disabled = false;
    button.textContent = 'Send Test Transaction';
  }
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', initializeSbc);

// Add event listeners
document.getElementById('estimate-tx').addEventListener('click', estimateTransaction);
document.getElementById('send-tx').addEventListener('click', sendTestTransaction); 