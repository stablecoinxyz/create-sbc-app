import { SbcAppKit } from '@stablecoin.xyz/core';
import { {{chain}} } from 'viem/chains';
import { formatEther, parseEther, isAddress, encodeFunctionData } from 'viem';
import type { 
  AccountInfo, 
  UserOperationResult, 
  UserOperationEstimate,
  SendUserOperationParams 
} from '@stablecoin.xyz/core';
import './style.css';

// Configuration from environment variables
const config = {
  apiKey: import.meta.env.VITE_SBC_API_KEY || '{{apiKey}}',
  chain: {{chain}},
  debug: import.meta.env.VITE_SBC_DEBUG === 'true',
  privateKey: import.meta.env.VITE_PRIVATE_KEY as `0x${string}` | undefined,
  staging: import.meta.env.VITE_SBC_STAGING === 'true'
};

// Demo constants
const DEMO_TARGET = import.meta.env.VITE_DEMO_TARGET_ADDRESS || '0x742d35Cc6635C0532925a3b8c17f21c5F8E63231';
const DEMO_AMOUNT = '0.001'; // ETH amount for demo

// Global state
let sbcAppKit: SbcAppKit | null = null;
let currentAccount: AccountInfo | null = null;
let isLoading = false;

// Utility functions
function formatAddress(address: string): string {
  return `${address.slice(0, 6)}...${address.slice(-4)}`;
}

function formatBalance(balance: string): string {
  return parseFloat(formatEther(BigInt(balance))).toFixed(6);
}

function showStatus(message: string, isError = false): void {
  const statusEl = document.getElementById('status');
  if (statusEl) {
    statusEl.textContent = message;
    statusEl.className = `status ${isError ? 'error' : 'success'}`;
    statusEl.style.display = 'block';
    
    // Hide after 5 seconds unless it's an error
    if (!isError) {
      setTimeout(() => {
        statusEl.style.display = 'none';
      }, 5000);
    }
  }
}

function hideStatus(): void {
  const statusEl = document.getElementById('status');
  if (statusEl) {
    statusEl.style.display = 'none';
  }
}

function setLoading(loading: boolean): void {
  isLoading = loading;
  updateUI();
}

// UI Update functions
function updateAccountInfo(): void {
  const accountEl = document.getElementById('account-info');
  if (!accountEl) return;

  if (!currentAccount) {
    accountEl.innerHTML = '<p>No account data available</p>';
    return;
  }

  accountEl.innerHTML = `
    <div class="info-grid">
      <div class="info-row">
        <strong>Smart Account:</strong>
        <code>${formatAddress(currentAccount.address)}</code>
        <button class="copy-btn" onclick="copyToClipboard('${currentAccount.address}')">üìã</button>
      </div>
      <div class="info-row">
        <strong>Owner Address:</strong>
        <code>${formatAddress(sbcAppKit?.getOwnerAddress() || '')}</code>
        <button class="copy-btn" onclick="copyToClipboard('${sbcAppKit?.getOwnerAddress() || ''}')">üìã</button>
      </div>
      <div class="info-row">
        <strong>Chain:</strong>
        <span>{{chain}} (${sbcAppKit?.getChainConfig().name})</span>
      </div>
      <div class="info-row">
        <strong>Deployment:</strong>
        <span class="${currentAccount.deploymentTransaction ? 'deployed' : 'pending'}">
          ${currentAccount.deploymentTransaction ? '‚úÖ Deployed' : '‚è≥ Will deploy on first transaction'}
        </span>
      </div>
      <div class="info-row">
        <strong>Balance:</strong>
        <span>${currentAccount.balance ? formatBalance(currentAccount.balance) : '0.000000'} ETH</span>
        <button class="refresh-btn" onclick="refreshAccount()">üîÑ</button>
      </div>
    </div>
  `;
}

function updateTransactionForm(): void {
  const formEl = document.getElementById('transaction-form');
  if (!formEl) return;

  formEl.innerHTML = `
    <h3>üí∏ Send Transaction</h3>
    <div class="form-group">
      <label for="target-address">Target Address:</label>
      <input 
        type="text" 
        id="target-address" 
        placeholder="0x..." 
        value="${DEMO_TARGET}"
        class="address-input"
      />
      <span id="address-error" class="error-text" style="display: none;"></span>
    </div>
    
    <div class="form-group">
      <label for="transfer-amount">Amount (ETH):</label>
      <input 
        type="number" 
        id="transfer-amount" 
        placeholder="0.001" 
        value="${DEMO_AMOUNT}"
        step="0.001"
        min="0"
      />
    </div>

    <div class="button-group">
      <button id="estimate-gas-btn" class="secondary-btn">
        Estimate Gas
      </button>
      <button id="send-eth-btn" class="primary-btn">
        Send ETH
      </button>
    </div>

    <div class="button-group">
      <button id="send-batch-btn" class="secondary-btn">
        Send Batch (2x 0.0005 ETH)
      </button>
      <button id="reset-form-btn" class="link-btn">
        Reset Form
      </button>
    </div>
  `;

  // Add event listeners
  setupFormEventListeners();
}

function updateGasEstimate(estimate: UserOperationEstimate | null): void {
  const gasEl = document.getElementById('gas-estimate');
  if (!gasEl) return;

  if (!estimate) {
    gasEl.style.display = 'none';
    return;
  }

  gasEl.style.display = 'block';
  gasEl.innerHTML = `
    <h3>‚õΩ Gas Estimate</h3>
    <div class="info-grid">
      <div class="info-row">
        <strong>Total Gas:</strong>
        <span>${estimate.totalGasUsed}</span>
      </div>
      <div class="info-row">
        <strong>Estimated Cost:</strong>
        <span>${formatEther(BigInt(estimate.totalGasCost))} ETH</span>
      </div>
      <div class="info-row">
        <strong>Max Fee:</strong>
        <span>${formatEther(BigInt(estimate.maxFeePerGas))} ETH</span>
      </div>
    </div>
    <div class="gas-breakdown">
      <small>
        Verification: ${estimate.verificationGasLimit} | 
        Call: ${estimate.callGasLimit} | 
        Pre-verification: ${estimate.preVerificationGas}
      </small>
    </div>
  `;
}

function updateTransactionResult(result: UserOperationResult | null): void {
  const resultEl = document.getElementById('transaction-result');
  if (!resultEl) return;

  if (!result) {
    resultEl.style.display = 'none';
    return;
  }

  resultEl.style.display = 'block';
  resultEl.className = 'card success';
  
  const explorerUrl = sbcAppKit?.getChainConfig().blockExplorers?.default?.url;
  const txLink = explorerUrl 
    ? `<a href="${explorerUrl}/tx/${result.transactionHash}" target="_blank" rel="noopener noreferrer">${formatAddress(result.transactionHash)}</a>`
    : `<code>${formatAddress(result.transactionHash)}</code>`;

  resultEl.innerHTML = `
    <h3>‚úÖ Transaction Successful!</h3>
    <div class="info-grid">
      <div class="info-row">
        <strong>Transaction Hash:</strong>
        ${txLink}
      </div>
      <div class="info-row">
        <strong>User Operation:</strong>
        <code>${formatAddress(result.userOperationHash)}</code>
      </div>
      <div class="info-row">
        <strong>Gas Used:</strong>
        <span>${result.gasUsed}</span>
      </div>
    </div>
  `;
}

function updateUI(): void {
  // Update loading states
  const buttons = document.querySelectorAll('button');
  buttons.forEach(btn => {
    if (btn.classList.contains('refresh-btn')) return; // Skip refresh button
    btn.disabled = isLoading || !sbcAppKit;
  });

  // Update button text for loading states
  const estimateBtn = document.getElementById('estimate-gas-btn');
  const sendBtn = document.getElementById('send-eth-btn');
  const batchBtn = document.getElementById('send-batch-btn');

  if (estimateBtn) {
    estimateBtn.textContent = isLoading ? 'Estimating...' : 'Estimate Gas';
  }
  if (sendBtn) {
    sendBtn.textContent = isLoading ? 'Sending...' : 'Send ETH';
  }
  if (batchBtn) {
    batchBtn.textContent = isLoading ? 'Sending...' : 'Send Batch (2x 0.0005 ETH)';
  }
}

// Event handlers
function setupFormEventListeners(): void {
  const targetInput = document.getElementById('target-address') as HTMLInputElement;
  const estimateBtn = document.getElementById('estimate-gas-btn');
  const sendBtn = document.getElementById('send-eth-btn');
  const batchBtn = document.getElementById('send-batch-btn');
  const resetBtn = document.getElementById('reset-form-btn');

  // Address validation
  targetInput?.addEventListener('input', validateAddress);

  // Button event listeners
  estimateBtn?.addEventListener('click', handleEstimateGas);
  sendBtn?.addEventListener('click', handleSendETH);
  batchBtn?.addEventListener('click', handleSendBatch);
  resetBtn?.addEventListener('click', resetForm);
}

function validateAddress(): void {
  const targetInput = document.getElementById('target-address') as HTMLInputElement;
  const errorEl = document.getElementById('address-error');
  
  if (!targetInput || !errorEl) return;

  const address = targetInput.value.trim();
  let error = '';

  if (!address) {
    error = 'Address is required';
  } else if (!isAddress(address)) {
    error = 'Invalid Ethereum address';
  }

  if (error) {
    errorEl.textContent = error;
    errorEl.style.display = 'block';
    targetInput.classList.add('error');
  } else {
    errorEl.style.display = 'none';
    targetInput.classList.remove('error');
  }
}

async function handleEstimateGas(): Promise<void> {
  if (!sbcAppKit || isLoading) return;

  const targetInput = document.getElementById('target-address') as HTMLInputElement;
  const amountInput = document.getElementById('transfer-amount') as HTMLInputElement;

  const targetAddress = targetInput?.value.trim();
  const amount = amountInput?.value.trim() || DEMO_AMOUNT;

  if (!targetAddress || !isAddress(targetAddress)) {
    showStatus('Please enter a valid target address', true);
    return;
  }

  try {
    setLoading(true);
    hideStatus();

    const params: SendUserOperationParams = {
      to: targetAddress,
      data: '0x',
      value: parseEther(amount).toString()
    };

    const estimate = await sbcAppKit.estimateUserOperation(params);
    updateGasEstimate(estimate);
    showStatus('Gas estimation complete');
  } catch (error) {
    console.error('Gas estimation failed:', error);
    showStatus(`Gas estimation failed: ${error instanceof Error ? error.message : 'Unknown error'}`, true);
    updateGasEstimate(null);
  } finally {
    setLoading(false);
  }
}

async function handleSendETH(): Promise<void> {
  if (!sbcAppKit || isLoading) return;

  const targetInput = document.getElementById('target-address') as HTMLInputElement;
  const amountInput = document.getElementById('transfer-amount') as HTMLInputElement;

  const targetAddress = targetInput?.value.trim();
  const amount = amountInput?.value.trim() || DEMO_AMOUNT;

  if (!targetAddress || !isAddress(targetAddress)) {
    showStatus('Please enter a valid target address', true);
    return;
  }

  try {
    setLoading(true);
    hideStatus();

    const params: SendUserOperationParams = {
      to: targetAddress,
      data: '0x',
      value: parseEther(amount).toString()
    };

    const result = await sbcAppKit.sendUserOperation(params);
    updateTransactionResult(result);
    showStatus('Transaction sent successfully!');
    
    // Refresh account after successful transaction
    setTimeout(refreshAccount, 2000);
  } catch (error) {
    console.error('Transaction failed:', error);
    showStatus(`Transaction failed: ${error instanceof Error ? error.message : 'Unknown error'}`, true);
    updateTransactionResult(null);
  } finally {
    setLoading(false);
  }
}

async function handleSendBatch(): Promise<void> {
  if (!sbcAppKit || isLoading) return;

  const targetInput = document.getElementById('target-address') as HTMLInputElement;
  const targetAddress = targetInput?.value.trim();

  if (!targetAddress || !isAddress(targetAddress)) {
    showStatus('Please enter a valid target address', true);
    return;
  }

  try {
    setLoading(true);
    hideStatus();

    const params = {
      calls: [
        {
          to: targetAddress,
          data: '0x',
          value: parseEther('0.0005') // 0.0005 ETH
        },
        {
          to: targetAddress,
          data: '0x',
          value: parseEther('0.0005') // Another 0.0005 ETH
        }
      ]
    };

    const result = await sbcAppKit.sendUserOperation(params);
    updateTransactionResult(result);
    showStatus('Batch transaction sent successfully!');
    
    // Refresh account after successful transaction
    setTimeout(refreshAccount, 2000);
  } catch (error) {
    console.error('Batch transaction failed:', error);
    showStatus(`Batch transaction failed: ${error instanceof Error ? error.message : 'Unknown error'}`, true);
    updateTransactionResult(null);
  } finally {
    setLoading(false);
  }
}

function resetForm(): void {
  const targetInput = document.getElementById('target-address') as HTMLInputElement;
  const amountInput = document.getElementById('transfer-amount') as HTMLInputElement;

  if (targetInput) targetInput.value = DEMO_TARGET;
  if (amountInput) amountInput.value = DEMO_AMOUNT;

  updateGasEstimate(null);
  updateTransactionResult(null);
  hideStatus();
  validateAddress();
}

// Utility functions exposed globally
(window as any).copyToClipboard = async (text: string): Promise<void> => {
  try {
    await navigator.clipboard.writeText(text);
    showStatus('Copied to clipboard!');
  } catch (error) {
    console.error('Failed to copy:', error);
    showStatus('Failed to copy to clipboard', true);
  }
};

(window as any).refreshAccount = async (): Promise<void> => {
  if (!sbcAppKit) return;
  
  try {
    currentAccount = await sbcAppKit.getAccount();
    updateAccountInfo();
    showStatus('Account refreshed');
  } catch (error) {
    console.error('Failed to refresh account:', error);
    showStatus('Failed to refresh account', true);
  }
};

// Initialize the application
async function initializeApp(): Promise<void> {
  const appEl = document.getElementById('app');
  if (!appEl) return;

  // Show loading state
  appEl.innerHTML = `
    <div class="loading-container">
      <h1>{{projectName}}</h1>
      <p>üöÄ Initializing SBC App Kit...</p>
      <p>Setting up your smart account...</p>
    </div>
  `;

  try {
    // Initialize SBC App Kit
    sbcAppKit = new SbcAppKit(config);
    
    // Get account information
    currentAccount = await sbcAppKit.getAccount();

    // Render main UI
    renderMainUI();
    
    // Update all components
    updateAccountInfo();
    updateTransactionForm();
    updateUI();

    showStatus('SBC App Kit initialized successfully!');
  } catch (error) {
    console.error('Initialization failed:', error);
    renderErrorUI(error instanceof Error ? error.message : 'Unknown error');
  }
}

function renderMainUI(): void {
  const appEl = document.getElementById('app');
  if (!appEl) return;

  appEl.innerHTML = `
    <div class="container">
      <header class="header">
        <h1>{{projectName}}</h1>
        <p>SBC Account Abstraction Demo</p>
      </header>

      <div id="status" class="status" style="display: none;"></div>

      <div class="grid">
        <!-- Account Information -->
        <div class="card">
          <h2>üì± Account Info</h2>
          <div id="account-info"></div>
        </div>

        <!-- Transaction Form -->
        <div class="card">
          <div id="transaction-form"></div>
        </div>

        <!-- Gas Estimation Results -->
        <div id="gas-estimate" class="card" style="display: none;"></div>

        <!-- Transaction Results -->
        <div id="transaction-result" class="card" style="display: none;"></div>

        <!-- Vanilla Features -->
        <div class="card">
          <h2>‚ö° Vanilla Features</h2>
          <div class="feature-list">
            <div class="feature">
              <strong>‚úÖ Pure TypeScript</strong>
              <p>No framework dependencies</p>
            </div>
            <div class="feature">
              <strong>‚úÖ Vite Build System</strong>
              <p>Fast development and builds</p>
            </div>
            <div class="feature">
              <strong>‚úÖ Modern ES Modules</strong>
              <p>Clean, modular code structure</p>
            </div>
            <div class="feature">
              <strong>‚úÖ Full SBC Integration</strong>
              <p>Complete account abstraction features</p>
            </div>
          </div>
        </div>

        <!-- Documentation Links -->
        <div class="card">
          <h2>üìö Documentation</h2>
          <div class="links">
            <a href="https://docs.stablecoin.xyz" target="_blank" rel="noopener noreferrer">
              üìñ SBC Documentation
            </a>
            <a href="https://vitejs.dev/guide/" target="_blank" rel="noopener noreferrer">
              ‚ö° Vite Documentation
            </a>
            <a href="https://github.com/stablecoinxyz/app-kit" target="_blank" rel="noopener noreferrer">
              üíª GitHub Repository
            </a>
            <a href="https://docs.stablecoin.xyz/guides" target="_blank" rel="noopener noreferrer">
              üéØ Integration Guides
            </a>
          </div>
        </div>
      </div>

      <footer class="footer">
        <p>Powered by SBC App Kit ‚ö° Built with Vite & TypeScript</p>
      </footer>
    </div>
  `;
}

function renderErrorUI(errorMessage: string): void {
  const appEl = document.getElementById('app');
  if (!appEl) return;

  appEl.innerHTML = `
    <div class="error-container">
      <h1>‚ùå Initialization Error</h1>
      <p>${errorMessage}</p>
      <div class="error-details">
        <h3>Common Solutions:</h3>
        <ul>
          <li>Check your API key in the .env file</li>
          <li>Ensure you're using a supported chain</li>
          <li>Verify your internet connection</li>
          <li>Check the browser console for more details</li>
        </ul>
      </div>
      <button onclick="window.location.reload()">Reload App</button>
    </div>
  `;
}

// Start the application
document.addEventListener('DOMContentLoaded', initializeApp); 