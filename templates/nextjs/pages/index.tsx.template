import Head from 'next/head'
import { SbcProvider, useSbcApp, useUserOperation } from '@stablecoin.xyz/react'
import { {{chain}} } from 'viem/chains'
import { useState, useEffect } from 'react'
import { encodeFunctionData, formatEther, parseEther, isAddress } from 'viem'
import styles from '../styles/Home.module.css'

// Configuration from environment variables
const config = {
  apiKey: process.env.NEXT_PUBLIC_SBC_API_KEY || '{{apiKey}}',
  chain: {{chain}},
  debug: process.env.NEXT_PUBLIC_SBC_DEBUG === 'true',
  privateKey: process.env.NEXT_PUBLIC_PRIVATE_KEY as `0x${string}` | undefined,
  staging: process.env.NEXT_PUBLIC_SBC_STAGING === 'true'
}

// Demo constants
const DEMO_TARGET = process.env.NEXT_PUBLIC_DEMO_TARGET_ADDRESS || '0x742d35Cc6635C0532925a3b8c17f21c5F8E63231'
const DEMO_AMOUNT = '0.001' // ETH amount for demo

interface BalanceInfo {
  eth: string
  formatted: string
}

function Dashboard() {
  const { 
    sbcAppKit, 
    isInitialized, 
    error, 
    account, 
    isLoadingAccount, 
    accountError,
    refreshAccount 
  } = useSbcApp()

  const { 
    sendUserOperation, 
    estimateUserOperation,
    isLoading, 
    isSuccess, 
    isError, 
    error: txError, 
    data: txResult,
    reset 
  } = useUserOperation({
    onSuccess: (result) => {
      console.log('Transaction successful!', result)
      refreshAccount()
      fetchBalance()
    },
    onError: (error) => {
      console.error('Transaction failed:', error)
    }
  })

  // State management
  const [targetAddress, setTargetAddress] = useState(DEMO_TARGET)
  const [transferAmount, setTransferAmount] = useState(DEMO_AMOUNT)
  const [addressError, setAddressError] = useState('')
  const [balance, setBalance] = useState<BalanceInfo | null>(null)
  const [isLoadingBalance, setIsLoadingBalance] = useState(false)
  const [gasEstimate, setGasEstimate] = useState<any>(null)
  const [isEstimating, setIsEstimating] = useState(false)

  // Validate address input
  useEffect(() => {
    if (!targetAddress) {
      setAddressError('Address is required')
    } else if (!isAddress(targetAddress)) {
      setAddressError('Invalid Ethereum address')
    } else {
      setAddressError('')
    }
  }, [targetAddress])

  // Fetch account balance
  const fetchBalance = async () => {
    if (!sbcAppKit || !account) return

    try {
      setIsLoadingBalance(true)
      const accountInfo = await sbcAppKit.getAccount()
      const ethBalance = accountInfo.balance || '0'
      const formatted = formatEther(BigInt(ethBalance))
      
      setBalance({
        eth: ethBalance,
        formatted: parseFloat(formatted).toFixed(6)
      })
    } catch (error) {
      console.error('Failed to fetch balance:', error)
    } finally {
      setIsLoadingBalance(false)
    }
  }

  // Fetch balance when account loads
  useEffect(() => {
    if (account && !isLoadingAccount) {
      fetchBalance()
    }
  }, [account, isLoadingAccount])

  // Estimate gas for transaction
  const handleEstimateGas = async () => {
    if (!sbcAppKit || !targetAddress || addressError) return

    try {
      setIsEstimating(true)
      setGasEstimate(null)

      const estimate = await estimateUserOperation({
        to: targetAddress,
        data: '0x',
        value: parseEther(transferAmount).toString()
      })

      setGasEstimate(estimate)
      console.log('Gas estimate:', estimate)
    } catch (error) {
      console.error('Gas estimation failed:', error)
    } finally {
      setIsEstimating(false)
    }
  }

  // Send ETH transfer
  const handleSendETH = async () => {
    if (!sbcAppKit || !targetAddress || addressError) return

    try {
      await sendUserOperation({
        to: targetAddress,
        data: '0x',
        value: parseEther(transferAmount).toString()
      })
    } catch (error) {
      console.error('Failed to send ETH:', error)
    }
  }

  // Send batch transaction example
  const handleBatchTransaction = async () => {
    if (!sbcAppKit || !targetAddress || addressError) return

    try {
      // Example: Send multiple transactions in one batch
      await sendUserOperation({
        calls: [
          {
            to: targetAddress,
            data: '0x',
            value: parseEther('0.0005') // 0.0005 ETH
          },
          {
            to: targetAddress,
            data: '0x',
            value: parseEther('0.0005') // Another 0.0005 ETH
          }
        ]
      })
    } catch (error) {
      console.error('Failed to send batch transaction:', error)
    }
  }

  // Handle form reset
  const handleReset = () => {
    reset()
    setGasEstimate(null)
    setTargetAddress(DEMO_TARGET)
    setTransferAmount(DEMO_AMOUNT)
  }

  if (error) {
    return (
      <div className={styles.container}>
        <Head>
          <title>Error - {{projectName}}</title>
        </Head>
        <div className={styles.errorContainer}>
          <h2>‚ùå Initialization Error</h2>
          <p>{error.message}</p>
          <div className={styles.errorDetails}>
            <h3>Common Solutions:</h3>
            <ul>
              <li>Check your API key in .env.local</li>
              <li>Ensure you're using a supported chain</li>
              <li>Verify your internet connection</li>
            </ul>
          </div>
          <button onClick={() => window.location.reload()}>Reload App</button>
        </div>
      </div>
    )
  }

  if (!isInitialized) {
    return (
      <div className={styles.container}>
        <Head>
          <title>Loading - {{projectName}}</title>
        </Head>
        <div className={styles.loadingContainer}>
          <h2>üöÄ Initializing SBC App Kit...</h2>
          <p>Setting up your smart account...</p>
        </div>
      </div>
    )
  }

  if (accountError) {
    return (
      <div className={styles.container}>
        <Head>
          <title>Account Error - {{projectName}}</title>
        </Head>
        <div className={styles.errorContainer}>
          <h2>‚ùå Account Error</h2>
          <p>{accountError.message}</p>
          <button onClick={refreshAccount}>Retry</button>
        </div>
      </div>
    )
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>{{projectName}}</title>
        <meta name="description" content="SBC Account Abstraction Demo powered by Next.js" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <header className={styles.header}>
          <h1 className={styles.title}>{{projectName}}</h1>
          <p className={styles.description}>SBC Account Abstraction Demo</p>
        </header>

        <div className={styles.grid}>
          {/* Account Information */}
          <div className={styles.card}>
            <h2>üì± Account Info</h2>
            {isLoadingAccount ? (
              <p>Loading account...</p>
            ) : account ? (
              <div className={styles.accountInfo}>
                <div className={styles.infoRow}>
                  <strong>Smart Account:</strong>
                  <code>{account.address}</code>
                </div>
                <div className={styles.infoRow}>
                  <strong>Owner Address:</strong>
                  <code>{sbcAppKit?.getOwnerAddress()}</code>
                </div>
                <div className={styles.infoRow}>
                  <strong>Chain:</strong>
                  <span>{{chain}} ({sbcAppKit?.getChainConfig().name})</span>
                </div>
                <div className={styles.infoRow}>
                  <strong>Deployment:</strong>
                  <span className={account.deploymentTransaction ? styles.deployed : styles.pending}>
                    {account.deploymentTransaction ? '‚úÖ Deployed' : '‚è≥ Will deploy on first transaction'}
                  </span>
                </div>
                <div className={styles.infoRow}>
                  <strong>Balance:</strong>
                  <span>
                    {isLoadingBalance ? 'Loading...' : balance ? `${balance.formatted} ETH` : 'Unable to load'}
                  </span>
                  <button onClick={fetchBalance} disabled={isLoadingBalance}>üîÑ</button>
                </div>
              </div>
            ) : (
              <p>No account data</p>
            )}
          </div>

          {/* Transaction Form */}
          <div className={styles.card}>
            <h2>üí∏ Send Transaction</h2>
            <div className={styles.form}>
              <div className={styles.formGroup}>
                <label htmlFor="targetAddress">Target Address:</label>
                <input
                  id="targetAddress"
                  type="text"
                  value={targetAddress}
                  onChange={(e) => setTargetAddress(e.target.value)}
                  placeholder="0x..."
                  className={addressError ? styles.error : ''}
                />
                {addressError && <span className={styles.errorText}>{addressError}</span>}
              </div>

              <div className={styles.formGroup}>
                <label htmlFor="amount">Amount (ETH):</label>
                <input
                  id="amount"
                  type="number"
                  step="0.001"
                  value={transferAmount}
                  onChange={(e) => setTransferAmount(e.target.value)}
                  placeholder="0.001"
                />
              </div>

              <div className={styles.buttonGroup}>
                <button 
                  onClick={handleEstimateGas}
                  disabled={!sbcAppKit || isEstimating || !!addressError || !targetAddress}
                  className={styles.secondaryButton}
                >
                  {isEstimating ? 'Estimating...' : 'Estimate Gas'}
                </button>
                
                <button 
                  onClick={handleSendETH}
                  disabled={!sbcAppKit || isLoading || !!addressError || !targetAddress}
                  className={styles.primaryButton}
                >
                  {isLoading ? 'Sending...' : 'Send ETH'}
                </button>
              </div>

              <div className={styles.buttonGroup}>
                <button 
                  onClick={handleBatchTransaction}
                  disabled={!sbcAppKit || isLoading || !!addressError || !targetAddress}
                  className={styles.secondaryButton}
                >
                  {isLoading ? 'Sending...' : 'Send Batch (2x 0.0005 ETH)'}
                </button>
                
                <button onClick={handleReset} className={styles.linkButton}>
                  Reset Form
                </button>
              </div>
            </div>
          </div>

          {/* Gas Estimation Results */}
          {gasEstimate && (
            <div className={styles.card}>
              <h2>‚õΩ Gas Estimate</h2>
              <div className={styles.gasInfo}>
                <div className={styles.infoRow}>
                  <strong>Total Gas:</strong>
                  <span>{gasEstimate.totalGasUsed}</span>
                </div>
                <div className={styles.infoRow}>
                  <strong>Estimated Cost:</strong>
                  <span>{formatEther(BigInt(gasEstimate.totalGasCost))} ETH</span>
                </div>
                <div className={styles.infoRow}>
                  <strong>Max Fee:</strong>
                  <span>{formatEther(BigInt(gasEstimate.maxFeePerGas))} ETH</span>
                </div>
                <div className={styles.gasBreakdown}>
                  <small>
                    Verification: {gasEstimate.verificationGasLimit} | 
                    Call: {gasEstimate.callGasLimit} | 
                    Pre-verification: {gasEstimate.preVerificationGas}
                  </small>
                </div>
              </div>
            </div>
          )}

          {/* Transaction Status */}
          {(isSuccess || isError) && (
            <div className={`${styles.card} ${isSuccess ? styles.successCard : styles.errorCard}`}>
              <h2>{isSuccess ? '‚úÖ Success!' : '‚ùå Error'}</h2>
              {isSuccess && txResult && (
                <div className={styles.successInfo}>
                  <div className={styles.infoRow}>
                    <strong>Transaction Hash:</strong>
                    <a 
                      href={`${sbcAppKit?.getChainConfig().blockExplorers?.default?.url}/tx/${txResult.transactionHash}`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {txResult.transactionHash}
                    </a>
                  </div>
                  <div className={styles.infoRow}>
                    <strong>User Operation:</strong>
                    <code>{txResult.userOperationHash}</code>
                  </div>
                  <div className={styles.infoRow}>
                    <strong>Gas Used:</strong>
                    <span>{txResult.gasUsed}</span>
                  </div>
                </div>
              )}
              {isError && txError && (
                <div className={styles.errorInfo}>
                  <p>{txError.message}</p>
                </div>
              )}
            </div>
          )}

          {/* Next.js Features */}
          <div className={styles.card}>
            <h2>‚ö° Next.js Features</h2>
            <div className={styles.featureList}>
              <div className={styles.feature}>
                <strong>‚úÖ Server-Side Rendering</strong>
                <p>Pre-rendered for better performance</p>
              </div>
              <div className={styles.feature}>
                <strong>‚úÖ API Routes</strong>
                <p>Build backend functionality</p>
              </div>
              <div className={styles.feature}>
                <strong>‚úÖ TypeScript</strong>
                <p>Full type safety included</p>
              </div>
              <div className={styles.feature}>
                <strong>‚úÖ Environment Variables</strong>
                <p>Secure configuration management</p>
              </div>
            </div>
          </div>

          {/* Documentation Links */}
          <div className={styles.card}>
            <h2>üìö Documentation</h2>
            <div className={styles.links}>
              <a href="https://docs.stablecoin.xyz" target="_blank" rel="noopener noreferrer">
                üìñ SBC Documentation
              </a>
              <a href="https://nextjs.org/docs" target="_blank" rel="noopener noreferrer">
                ‚ö° Next.js Documentation
              </a>
              <a href="https://github.com/stablecoinxyz/app-kit" target="_blank" rel="noopener noreferrer">
                üíª GitHub Repository
              </a>
              <a href="https://docs.stablecoin.xyz/guides" target="_blank" rel="noopener noreferrer">
                üéØ Integration Guides
              </a>
            </div>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>Powered by SBC App Kit ‚ö° Built with Next.js</p>
      </footer>
    </div>
  )
}

export default function Home() {
  return (
    <SbcProvider config={config}>
      <Dashboard />
    </SbcProvider>
  )
} 